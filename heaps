#include <iostream>
using namespace std;
void heapify_for_max(int array[], int N, int i);
void heapify_for_min(int array[], int N, int i);
void build_max_heap(int array[], int N);
void heap_sort_ascending(int array[], int N);
void build_min_heap(int array[], int N);
void heap_sort_descending(int array[], int N);
void print_array(int array[], int N);
int main(){
    cout << "Enter length of Your array\n";
    int N; 
    cin >> N;
    int temp = N;
    int array[N];
    int i = 0;
    cout << "Enter every elements of your array\n";
    while(temp--){
        cin >> array[i++];
    }
    heap_sort_ascending(array, N); print_array(array, N);
    int choice = 1;
    while(choice){
        cout << "MAIN_MENU\n";
        cout << "1.build_max_heap\n";
        cout << "2.build_min_heap\n";
        cout << "3.heap_sort_ascending\n";
        cout << "4.heap_sort_descending\n";
        cout << "0.Exit\n";
        cout << "choose:";
        cin >> choice;
        switch(choice){
            case 0 : choice = 0; break;
            case 1 : build_max_heap(array, N); print_array(array, N);break;
            case 2 : build_min_heap(array, N); print_array(array, N);break;
            case 3 : heap_sort_ascending(array, N); print_array(array, N); break;
            case 4 : heap_sort_descending(array, N); print_array(array, N); break;
            default : cout << "Try_Again!!!\n"; break;
        }
    }

}
void print_array(int array[], int N){
    cout << "\n";
    for(int i = 0; i< N; i++){
        std::cout << array[i] << " ";
    }
    cout << "\n\n";
}
void heapify_for_max(int array[], int N, int i){
    int l = 2*i + 1;
    int r = 2*i + 2;
    int largest;
    if(l < N && array[l] > array[i]){
        largest = l;
    }
    else largest = i;
    if(r < N && array[r] > array[largest]){
        largest = r;
    }
    if(largest != i){
        int temp = array[largest];
        array[largest] = array[i];
        array[i] = temp;
        heapify_for_max(array, N, largest);
    }
    
}
void heapify_for_min(int array[], int N, int i){
    int l = 2*i + 1;
    int r = 2*i + 2;
    int smallest;
    if(l < N && array[l] < array[i]){
        smallest = l;
    }
    else smallest = i;
    if(r < N && array[r] < array[smallest]){
        smallest = r;
    }
    if(smallest != i){
        int temp = array[smallest];
        array[smallest] = array[i];
        array[i] = temp;
        heapify_for_min(array, N, smallest);
    }
    
}
void build_max_heap(int array[], int N){
    int end = N/2 - 1;
    for(end; end >=0; end--){
        heapify_for_max(array, N, end);
    }
}
void heap_sort_ascending(int array[], int N){
    build_max_heap(array, N);
    for(int i = N-1; i > 0; i--){
        swap(array[0], array[i]);
        heapify_for_max(array, i, 0);
    }
}
void build_min_heap(int array[], int N){
    int end = N/2 - 1;
    for(end; end >=0; end--){
        heapify_for_min(array, N, end);
    }
}
void heap_sort_descending(int array[], int N){
    build_min_heap(array, N);
    for(int i = N-1; i > 0; i--){
        swap(array[0], array[i]);
        heapify_for_min(array, i, 0);
    }
}
