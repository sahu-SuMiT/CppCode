// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;

class Node{
    public : int data;
    Node *left;
    Node *right;
    public:
    Node(int data){
        this->data = data;
        this->left = nullptr;
        this->right = nullptr;
    }
};
    class BinarySearchTree{
    public:Node *root;
    public :void insert(Node *node){
        root = insertHelper(root, node);
    }
    private :Node* insertHelper(Node *root, Node *node){
        int data = node ->data;
        if(!root){
            root = node;
            return root;
        }
        if(data < root->data){
            root->left = insertHelper(root->left, node);
        }
        else{
            root->right = insertHelper(root->right, node);
        }
        return root;
        
    }
    public: void display(){
        displayHelper(root);
    }
    private: void displayHelper(Node *root){
        if(root){
            displayHelper(root->left);
            std::cout << root->data << " ";
            displayHelper(root->right);
        }
    }
    public: bool search(int data){
        return searchHelper(root, data);
    }
    private: bool searchHelper(Node *root, int data){
        if(root == NULL){
            return false;
        }
        else if(root->data == data){
            return true;
        }
        else if(data < root->data){
            return searchHelper(root->left, data);
        }
        else{
            return searchHelper(root->right, data);
        }
    }
    public: void remove(int data){
        removeHelper(root, data);
    }
    private: Node* removeHelper(Node *root, int data){
        if(root == NULL){
            return root;
        }
        if(data < root->data){
            root->left = removeHelper(root->left, data);
        }
        else if(data > root->data){
            root->right = removeHelper(root->right, data);
        }
        else{
            if(root->left ==NULL && root->right == NULL){
                root = NULL;
            }
            else if(root -> right){
                root->data = successor(root);
                root->right = removeHelper(root->right, root->data);
            }
            else{
                root->data = predecessor(root);
                root->left = removeHelper(root->left, root->data);
            }
        }
        return root;
    }
    private: int successor(Node *root){
        root = root->right;
        while(root->left){
            root = root->left;
        }
        return root->data;
    }
    private: int predecessor(Node *root){
        root = root->left;
        while(root->right){
            root = root->right;
        }
        return root->data;
    }
    
};
int main() {
    BinarySearchTree *tree = new BinarySearchTree();
    tree->insert(new Node(5));
    tree->insert(new Node(3));
    tree->insert(new Node(7));
    tree->insert(new Node(1));
    tree->insert(new Node(4));
    tree->display();
    std::cout <<tree->search(5);
    
    tree->remove(5);
    std::cout << std::endl;
    tree->display();

    return 0;
}
