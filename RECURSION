PALINDROME TEST
bool isPalindrome(string name, int start, int end){
    if(start < end){
        return (name[start] == name[end]) && (isPalindrome(name, start+1, end -1));
    }
    return true;
}

COUNT ZEROS
int counter_helper(int n, int c){
    if(n){
        if(n%10 == 0){
            return counter_helper(n/10, c+1);
        }
        return counter_helper(n/10,c);
    }
}
SEARCH IN ARRAY
bool search(int array[], int n, int target, int index){
    if(index == n){
        return false;
    }
    return (array[index] == target || search(array, n, target, index + 1));
}
ISSORTED
bool isSorted(int array[], int n, int index){
    if(index == n - 1){
        return true;
    }
    return array[index] < array[index + 1] && isSorted(array, n, index + 1);
}
LIST OF REPEATING INDICES (java)
static ArrayList<Integer> list = new ArrayList<>();
	public static void main(String[] args) {
		int array[] = {1,2,3,4,5,6,7,5,8,5,10};
		list = f(array, 5, 0);
		for(int element : list){
		    System.out.println(element + " ");
		}
		
	}
or
static ArrayList<Integer> f(int array[], int target, int index){
        ArrayList<Integer> list = new ArrayList<>();
        if(index == array.length){
            return list;
        }
        else if(array[index] == target){
            list.add(index);
        }
        
        ArrayList<Integer> ansFromBelowCalls = f(array, target, index + 1);
        
        list.addAll(ansFromBelowCalls);
        return list;
    }
PATTERNS (java)
static void pattern(int rows, int cols){
        if(rows == 0){
            return;
        }
        else if(rows > cols){
            System.out.print(" * ");
            pattern(rows, cols + 1);
        }
        else{
            System.out.println();
            pattern(rows - 1, 0);
        }
    }
    static void triangle2(int rows, int cols){
        if(rows == 0){
            return;
        }
        else if(cols < rows){
            triangle2(rows, cols + 1);
            System.out.print("*");
        }
        else{
            triangle2(rows - 1, 0);
            System.out.println();
        }
    }
